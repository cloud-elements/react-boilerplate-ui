import React, { Component } from 'react';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Collapse from '@material-ui/core/Collapse';
import CardActions from '@material-ui/core/CardActions';
import CardHeader from '@material-ui/core/CardHeader';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import TextField from '@material-ui/core/TextField';
import Checkbox from '@material-ui/core/Checkbox';
import queryString from 'query-string';
import ConnectButton from './ConnectButton';
import { instanceBody } from '../../../ce-util';
import db from 'store2';

class LoginCard extends Component {
    constructor(props) {
        super(props);
        this.state = {
            connected: null,
            redirectUrl: null,
            expanded: false,
            checked: false
        };
        this.oauthRedirectSend = this.oauthRedirectSend.bind(this);
        this.createInstance = this.createInstance.bind(this);
        this.handleExpandClick = this.handleExpandClick.bind(this);
    }

    handleExpandClick = () => {
        this.setState({ expanded: !this.state.expanded });
    };

    handleCheck = name => event => {
        this.setState({ [name]: event.target.checked });
    };

    oauthRedirectSend() {
        const { ceKeys, vendorData, vendorCallbackUrl, baseUrl } = this.props;
        // the normalized Cloud Elements URL for retrieving an OAuth redirect
        const path = `elements/${vendorData.elementKey}/oauth/url`;
        // The query parameters with the api key, api secret, and callback url.
        let queryParams = queryString.stringify({
            apiKey: vendorData.vendorApiKey,
            apiSecret: vendorData.vendorSecret,
            callbackUrl: vendorCallbackUrl
        });
        // handle special cases
        // TODO put this in ce-util and handle more smoothly
        if (vendorData.elementKey === "quickbooks") {
            queryParams += "&scope=com.intuit.quickbooks.accounting&authentication.type=oauth2";
            //TODO: get the siteAddress from the vendorData
        } else if (vendorData.elementKey === "shopify") {
            queryParams += "&siteAddress=cloudelements-demo";
        }
        // place everything above into an object for fetch to use
        const config = {
            method: 'GET',
            headers: {
                'Authorization': `User ${ceKeys.userToken}, Organization ${ceKeys.orgToken}`,
                'Content-Type': 'application/json'
            }
        }
        const request = async () => {
            const response = await fetch(`${baseUrl}/${path}?${queryParams}`, config);
            const json = await response.json();
            // Redirect user to url generated by Cloud Elements
            window.location = await json.oauthUrl;
        }
        request();
    }

    createInstance(oauthCode, state) {
        const { ceKeys, vendorData, vendorCallbackUrl, baseUrl } = this.props;
        const path = `elements/${vendorData.elementKey}/instances`;
        // create the appropriate request body for the POST /instances API call
        const body = instanceBody(vendorData.elementKey, oauthCode, vendorCallbackUrl, vendorData, state);
        const config = {
            method: 'POST',
            headers: {
                'Authorization': `User ${ceKeys.userToken}, Organization ${ceKeys.orgToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        }
        const request = async () => {
            const response = await fetch(`${baseUrl}/${path}`, config);
            const json = await response.json();
            // store instance token on response -- This should hit an external server API and store token in reference to the logged in user
            // but for now it's just hanging out in local storage on 
            if (await json.token) {
                if (state) {
                    await db.set(state, json.token);
                } else {
                    await db.set("shopify", json.token);
                }
                await this.setState({
                    connected: true
                });
            }
        }
        request();
    }

    componentWillMount() {
        const { vendorData } = this.props;
        // first check to see if instance already exists for this element
        if (db.get(vendorData.elementKey)) {
            this.setState({
                connected: true
            });
        } else {
            const queryParams = queryString.parse(window.location.search);
            // If an OAuth code is detected that matches the elementKey of the card use it to create an instance
            // TODO: move all of this into the "createInstance helper func"
            if (queryParams.code && (queryParams.state === vendorData.elementKey)) {
                this.createInstance(queryParams.code, queryParams.state);
            } else if (queryParams.shop && vendorData.elementKey === "shopify") {
                this.createInstance(queryParams.code, "shopify");
            }
        }
    }

    render() {
        const { connected } = this.state;
        const elementName = this.props.vendorData.nameText;
        const configs =  this.props.vendorData.configs;
        let cardSubHeader = "Connect your " + elementName + " account";
        if (connected) {
            cardSubHeader = elementName + " is connected.";
        }
        const configForm = () => {
            if (configs){
                return (
                    Object.keys(configs).map((config, i) => {
                        let field;
                        switch (configs[config].type) {
                            case 'string':
                                field = (
                                    <TextField
                                        label={configs[config].label}
                                        id={i}
                                        helperText="Some important text"
                                    />);
                                break;
                            case 'boolean':
                                field = (
                                    <FormControlLabel
                                        control={
                                            <Checkbox
                                                checked={this.state[config]}
                                                onChange={this.handleCheck(config)}
                                                value="checked"
                                                color="primary"
                                            />
                                        }
                                        label={configs[config].label}
                                    />)
                                break;
                            default:
                                break;
                        }
                    return field;
                    })
                )
            } else {
                return null;
            }
        };

        return (
            <Card
                className="LoginCard"
                style={{
                    margin: '20px',
                    float: 'left'
                }}>
                <CardHeader
                    title={elementName}
                    subheader={cardSubHeader}
                />
                <Collapse in={this.state.expanded} timeout="auto" unmountOnExit>
                    <CardContent>
                        {configForm()}
                    </CardContent>
                </Collapse>
                <CardActions>
                    <ConnectButton
                        connected={connected}
                        oauthRedirectSend={this.oauthRedirectSend}
                        expandConfigs={this.handleExpandClick}
                        needsConfigure={configs}
                    />
                </CardActions>
            </Card>
        )
    }
};

export default LoginCard;